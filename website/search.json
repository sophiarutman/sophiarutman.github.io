[
  {
    "objectID": "code/EDA/ScatterplotDraft.html",
    "href": "code/EDA/ScatterplotDraft.html",
    "title": "Scatterplot Draft",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.5.1     ✔ purrr   1.0.2\n✔ tibble  3.2.1     ✔ dplyr   1.1.3\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.3     ✔ forcats 0.5.2\n\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\ndf &lt;- read.csv(\"../../data/clean_data/joined_data.csv\")\n\nojs_define(data = df)\n\nWarning: 'xfun::attr()' is deprecated.\nUse 'xfun::attr2()' instead.\nSee help(\"Deprecated\")\n\n\n\nd3 = require('d3@7') \nimport {vl} from \"@vega/vega-lite-api-v5\"\nimport {SummaryTable} from \"@observablehq/summary-table\"\n\ndata_use = transpose(data)\n\nSummaryTable(data_use)"
  },
  {
    "objectID": "code/bar_charts.html",
    "href": "code/bar_charts.html",
    "title": "DSAN 5200",
    "section": "",
    "text": "import dash\nfrom dash import dcc, html, Input, Output, dash_table\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport os\n\n# Load poverty data\npoverty_data = pd.read_csv(\"../data/clean_data/state_poverty.csv\")\npoverty_data[\"code\"] = poverty_data[\"code\"].str.upper()\n\n# Create US map with poverty rates\nfig_map = px.choropleth(\n    poverty_data,\n    locations=\"code\",\n    locationmode=\"USA-states\",\n    color=\"total_pov\",\n    hover_name=\"name\",\n    color_continuous_scale=\"Reds\",\n    scope=\"usa\",\n    title=\"Click a State to See Substance Use vs Poverty\"\n)\n\n# Initialize Dash app\napp = dash.Dash(__name__)\nserver = app.server  # for deployment\n\n# Layout\napp.layout = html.Div([\n    html.H2(\"US Substance Use & Poverty Dashboard\"),\n    dcc.Graph(id=\"us-map\", figure=fig_map),\n    dcc.Graph(id=\"state-details\"),\n    html.H4(\"Raw CSV Data:\"),\n    dash_table.DataTable(\n        id=\"raw-data-table\",\n        style_table={\"overflowX\": \"auto\"},\n        style_cell={\"textAlign\": \"left\"},\n        page_size=10\n    )\n])\n\n# Callback to update graph and table\n@app.callback(\n    Output(\"state-details\", \"figure\"),\n    Output(\"raw-data-table\", \"data\"),\n    Output(\"raw-data-table\", \"columns\"),\n    Input(\"us-map\", \"clickData\")\n)\ndef update_state_plot(clickData):\n    if not clickData:\n        return (\n            go.Figure().update_layout(title=\"Click on a state to view data.\"),\n            [], []\n        )\n\n    state_code = clickData[\"points\"][0][\"location\"]\n    state_name = poverty_data[poverty_data[\"code\"] == state_code][\"name\"].values[0]\n    file_path = f\"../data/state_data/{state_name.lower()}.csv\"\n\n    if not os.path.exists(file_path):\n        return (\n            go.Figure().update_layout(title=f\"No drug usage data found for {state_name}\"),\n            [], []\n        )\n\n    # Load drug usage data\n    df = pd.read_csv(file_path)\n    df = df.iloc[8:18, :].drop(columns=[\"Unnamed: 0\"], errors=\"ignore\")\n    df = df.rename(columns={df.columns[0]: \"Age Group\"})\n    df[\"state\"] = state_name\n    drug_columns = df.columns[2:-1]\n    df_melted = df.melt(id_vars=[\"Age Group\"], value_vars=drug_columns,\n                        var_name=\"Substance\", value_name=\"Usage (%)\")\n    state_pov = poverty_data[poverty_data[\"name\"] == state_name]\n\n    # Create subplot\n    subfig = make_subplots(\n        rows=1, cols=2,\n        column_widths=[0.75, 0.25],\n        specs=[[{\"type\": \"xy\"}, {\"type\": \"xy\"}]],\n        subplot_titles=[f\"{state_name} - Substance Use by Age\", \"Poverty Rates\"]\n    )\n\n    for substance in df_melted[\"Substance\"].unique():\n        df_sub = df_melted[df_melted[\"Substance\"] == substance]\n        subfig.add_trace(\n            go.Bar(x=df_sub[\"Age Group\"], y=df_sub[\"Usage (%)\"], name=substance),\n            row=1, col=1\n        )\n\n    if not state_pov.empty:\n        subfig.add_trace(\n            go.Bar(\n                x=[\"Total Poverty\", \"Child Poverty\"],\n                y=[state_pov.iloc[0][\"total_pov\"], state_pov.iloc[0][\"child_pov\"]],\n                marker_color=\"crimson\",\n                name=\"Poverty\"\n            ),\n            row=1, col=2\n        )\n\n    subfig.update_layout(\n        title=f\"{state_name}: Drug Use vs Poverty\",\n        height=600,\n        width=1200,\n        showlegend=True,\n        legend_title=\"Drug Type\",\n        legend=dict(\n            orientation=\"v\",\n            x=1.02,\n            y=1,\n            bgcolor=\"rgba(255,255,255,0.7)\",\n            bordercolor=\"black\",\n            borderwidth=1\n        )\n    )\n    subfig.update_xaxes(title_text=\"Age Groups\", row=1, col=1)\n    subfig.update_yaxes(title_text=\"Usage (%)\", row=1, col=1)\n    subfig.update_yaxes(title_text=\"Poverty Rate (%)\", row=1, col=2)\n\n    # Format raw CSV as table\n    table_data = df.to_dict(\"records\")\n    table_columns = [{\"name\": col, \"id\": col} for col in df.columns]\n\n    return subfig, table_data, table_columns\n\n# Run the app\nif __name__ == \"__main__\":\n    app.run(debug=True, port=8051)"
  }
]